
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Fun√ß√£o para gerar string aleat√≥ria segura
function generateRandomString(length: number): string {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
  let result = '';
  const values = new Uint8Array(length);
  crypto.getRandomValues(values);
  
  for (let i = 0; i < length; i++) {
    result += charset[values[i] % charset.length];
  }
  
  return result;
}

// Fun√ß√£o para gerar code_challenge a partir do code_verifier
async function generateCodeChallenge(codeVerifier: string): Promise<string> {
  const encoder = new TextEncoder();
  const data = encoder.encode(codeVerifier);
  const digest = await crypto.subtle.digest('SHA-256', data);
  
  // Converter para base64url
  const base64 = btoa(String.fromCharCode(...new Uint8Array(digest)));
  return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Iniciando fun√ß√£o meli-auth-start');
    console.log('üìã Headers recebidos:', Object.fromEntries(req.headers.entries()));

    // Verificar se o usu√°rio est√° autenticado
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      console.error('‚ùå Authorization header n√£o encontrado');
      return new Response(
        JSON.stringify({ error: 'Authorization header required' }),
        { 
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ Authorization header encontrado');

    // Verificar vari√°veis de ambiente do Mercado Livre
    const clientId = Deno.env.get('MERCADO_LIVRE_CLIENT_ID');
    const redirectUri = Deno.env.get('MERCADO_LIVRE_REDIRECT_URI');

    console.log('üîç Verificando vari√°veis de ambiente:');
    console.log('- MERCADO_LIVRE_CLIENT_ID:', clientId ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('- MERCADO_LIVRE_REDIRECT_URI:', redirectUri ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

    if (!clientId || !redirectUri) {
      console.error('‚ùå Vari√°veis de ambiente ML n√£o configuradas');
      return new Response(
        JSON.stringify({ 
          error: 'Mercado Livre configuration missing',
          details: {
            clientId: !!clientId,
            redirectUri: !!redirectUri
          }
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Inicializar Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    console.log('üîß Inicializando Supabase client');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Verificar o usu√°rio autenticado
    const token = authHeader.replace('Bearer ', '');
    console.log('üîê Verificando token de autentica√ß√£o');
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      console.error('‚ùå Erro ao verificar usu√°rio:', userError);
      return new Response(
        JSON.stringify({ error: 'Invalid authentication token' }),
        { 
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ Usu√°rio autenticado:', user.id);

    // Gerar PKCE parameters
    const codeVerifier = generateRandomString(128);
    const codeChallenge = await generateCodeChallenge(codeVerifier);
    const state = crypto.randomUUID();

    console.log('üîë Par√¢metros PKCE gerados:');
    console.log('- Code verifier (primeiros 20 chars):', codeVerifier.substring(0, 20) + '...');
    console.log('- Code challenge (primeiros 20 chars):', codeChallenge.substring(0, 20) + '...');
    console.log('- State:', state);

    // Limpar estados antigos do usu√°rio
    console.log('üßπ Limpando estados antigos do usu√°rio');
    const { error: deleteError } = await supabase
      .from('meli_auth_states')
      .delete()
      .eq('user_id', user.id);

    if (deleteError) {
      console.warn('‚ö†Ô∏è Aviso ao limpar estados antigos:', deleteError);
    }

    // Salvar estado tempor√°rio no banco
    console.log('üíæ Salvando estado de autentica√ß√£o no banco');
    const { error: insertError } = await supabase
      .from('meli_auth_states')
      .insert({
        user_id: user.id,
        code_verifier: codeVerifier,
        state: state
      });

    if (insertError) {
      console.error('‚ùå Erro ao salvar estado de autentica√ß√£o:', insertError);
      return new Response(
        JSON.stringify({ 
          error: 'Failed to save auth state',
          details: insertError
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ Estado de autentica√ß√£o salvo com sucesso');

    // Construir URL de autoriza√ß√£o do Mercado Livre Brasil
    const authUrl = new URL('https://auth.mercadolibre.com/authorization');
    authUrl.searchParams.set('response_type', 'code');
    authUrl.searchParams.set('client_id', clientId);
    authUrl.searchParams.set('redirect_uri', redirectUri);
    authUrl.searchParams.set('code_challenge', codeChallenge);
    authUrl.searchParams.set('code_challenge_method', 'S256');
    authUrl.searchParams.set('state', state);
    authUrl.searchParams.set('site_id', 'MLB'); // Brasil

    console.log('üåê URL de autoriza√ß√£o constru√≠da:');
    console.log('- URL completa:', authUrl.toString());
    console.log('- Par√¢metros:', Object.fromEntries(authUrl.searchParams.entries()));

    console.log('üéâ Processo de autentica√ß√£o iniciado com sucesso');

    return new Response(
      JSON.stringify({ 
        authUrl: authUrl.toString(),
        state: state,
        debug: {
          userId: user.id,
          timestamp: new Date().toISOString(),
          clientId: clientId,
          redirectUri: redirectUri
        }
      }),
      { 
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('üí• Erro inesperado em meli-auth-start:', error);
    console.error('üìä Stack trace:', error.stack);
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
